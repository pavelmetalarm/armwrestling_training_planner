---
name: Deploy to production

on:
    push:
        branches:
            - main
            - ci/fix-prod-deploy  # temporarily included for testing
# on:
#     workflow_dispatch:

jobs:
    deploy_prod:
        runs-on: ubuntu-latest

        steps:
            - name: Deploy via SSH
              uses: appleboy/ssh-action@v1.0.3
              with:
                  host: ${{ secrets.SERVER_HOST }}
                  username: ${{ secrets.SERVER_USER }}
                  key: ${{ secrets.SERVER_SSH_KEY }}
                  script: |
                    REPO="git@github.com:${{ github.repository }}.git"
                    BRANCH="${{ github.ref_name }}"
                    REPO_DIR="$HOME/armwrestling_training_planner"


                    if [ ! -d "$REPO_DIR" ]; then
                      echo "[Deploy] Cloning repository to $REPO_DIR"
                      git clone "$REPO" "$REPO_DIR"
                      cd "$REPO_DIR"
                      git checkout "$BRANCH"
                    else
                      echo "[Deploy] Repository already exists. Pulling latest changes..."
                      cd "$REPO_DIR"
                      git fetch origin
                      git checkout "$BRANCH"
                      git pull origin "$BRANCH"
                    fi
            - name: Preparation
              uses: appleboy/ssh-action@v1.0.3
              with:
                  host: ${{ secrets.SERVER_HOST }}
                  username: ${{ secrets.SERVER_USER }}
                  key: ${{ secrets.SERVER_SSH_KEY }}
                  script: |
                    echo "===================================================================="
                    echo "preparations.sh"
                    echo "===================================================================="

                    REPO_DIR="$HOME/armwrestling_training_planner"
                    PYTHON_VENV_PATH="$HOME/.venv"

                    # 1. Check Python version
                    echo "[Check] Python version:"
                    python3 --version || { echo " Python3 not found"; exit 1; }

                    # 2. Check if pip is available and install (upgrade) it
                    echo "[Check] Checking for pip..."

                    if ! python3 -m pip --version >/dev/null 2>&1; then
                        echo "[Missing] pip3 not found, installing it"
                        apt-get install python3-pip
                    else
                        echo "[OK] pip is present, upgrading..."
                        python3 -m pip install --upgrade pip
                    fi

                    # 3. Check if requirements/base.txt exists
                    if [ ! -f "$REPO_DIR/requirements/base.txt" ]; then
                        echo " requirements/base.txt not found"
                        exit 1
                    fi
                    echo "[Check] Found requirements/base.txt"

                    # 4. Create virtual environment if missing
                    if [ ! -d "$PYTHON_VENV_PATH" ]; then
                        echo "[Action] Creating virtual environment..."
                        python3 -m venv $PYTHON_VENV_PATH
                    else
                        echo "[Skip] Virtual environment already exists"
                    fi

                    # 5. Activate virtual environment
                    echo "[Action] Activating virtual environment..."
                    source $PYTHON_VENV_PATH/bin/activate

                    # 6. Install dependencies
                    echo "[Action] Installing dependencies..."
                    pip install -r "$REPO_DIR/requirements/base.txt"

                    # 5. Deactivate virtual environment
                    echo "[Action] Deactivating virtual environment..."
                    deactivate

            - name: Generate and deploy systemd unit
              uses: appleboy/ssh-action@v1.0.3
              with:
                  host: ${{ secrets.SERVER_HOST }}
                  username: ${{ secrets.SERVER_USER }}
                  key: ${{ secrets.SERVER_SSH_KEY }}
                  script: |
                    export BRANCH="main"
                    export USER="armwrestling_training_bot"
                    export PORT="8080"
                    export WORKDIR="/home/armwrestling_training_bot/armwrestling_training_planner"
                    export PYTHON_INTERPRETER_PATH="$HOME/.venv/bin/python3"
                    export REPO_DIR="$HOME/armwrestling_training_planner"

                    export SERVICE_NAME="armwrestling_training_bot@${BRANCH}.service"
                    export TEMPLATE_PATH="$REPO_DIR/systemd/armwrestling_training_bot.service.template"
                    export TMP_SERVICE_PATH="/tmp/${SERVICE_NAME}"
                    export SYSTEMD_SERVICE_PATH="/etc/systemd/system/${SERVICE_NAME}"


                    echo "============================================================="
                    echo "Generation of unit-file"
                    envsubst < "${TEMPLATE_PATH}" > "${TMP_SERVICE_PATH}"

                    echo "============================================================="
                    echo "Copying unit-file at /etc/systemd/system/"
                    sudo cp "${TMP_SERVICE_PATH}" "${SYSTEMD_SERVICE_PATH}" && \
                    echo "OK"

                    echo "============================================================="
                    echo "Systemd reload"
                    sudo systemctl daemon-reload && \
                    echo "OK"

                    echo "============================================================="
                    echo "Activation and starting service"
                    sudo systemctl enable --now "${SERVICE_NAME}" && \
                    echo "OK"

                    echo "============================================================="
                    echo "Removing temp files"
                    rm "${TMP_SERVICE_PATH}" && \
                    echo "OK"

                    echo "Check service status"
                    if (sudo systemctl is-active  "${SERVICE_NAME}" > /dev/null); then
                    echo "OK"
                    else
                    echo "PROBLEM"
                    fi
